#!/usr/bin/env python3:w
import pm_modules.lib
import pm_modules.i_gpu
import pm_modules.cpu_epp
import pm_modules.power_profile


UID = pm_modules.lib.os.getuid()

GOV_PROFILES = ['powersave', 'performance']

AMD_PSTATE_STATUS = '/sys/devices/system/cpu/amd_pstate/status'
SCALING_GOV = '/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'


def get_current_gov() -> str:
    try:
        with open(SCALING_GOV, 'r') as gov:
            current_gov = gov.read().strip()
            gov.close()
    except(FileNotFoundError):
        pm_modules.lib.log.warning(f'Scaling governor not available')
    return current_gov


def set_gov(gov: str):
    CPUS = pm_modules.lib.os.cpu_count()
    if gov in GOV_PROFILES: 
        for cpu in range(CPUS):
            try:
                with open(f'/sys/devices/system/cpu/cpu{cpu}/cpufreq/scaling_governor', 'w') as cpu_gov:
                    cpu_gov.write(gov)
                    cpu_gov.close()     
            except(OSError):
                pm_modules.lib.log.error('Cannot set scaling governor')
                exit(1)
        pm_modules.lib.log.info(f'Scaling governor set to: {gov}')


def main():
    parser = pm_modules.lib.argparse.ArgumentParser()
    parser.add_argument('-p', '--platform', help='''Set platform power profile ['power-saver', 'balanced', 'performance']''')
    parser.add_argument('-c', '--cpu', help='''Set CPU energy performance preference ['performance', 'balance_performance', 'balance_power', 'power']''')
    parser.add_argument('-g', '--gpu', help='Set GPU profile')
    args = parser.parse_args()
    gov = 'powersave'
    current_gov = get_current_gov()
    if gov != current_gov:
        set_gov(gov)
    else:
        pm_modules.lib.log.info(f'Governor already in desired state: {gov}')
    #print(args.cpu, args.platform)
    if args.cpu != None:
        pm_modules.cpu_epp.set_epp(args.cpu)
    if args.platform != None:    
        pm_modules.power_profile.set_platofrm_profile(args.platform)
    if args.gpu != None:
        pm_modules.i_gpu.set_gpu_profile(args.gpu)
    

if __name__ == "__main__":
    try:
        with open(AMD_PSTATE_STATUS, "r") as pstate:
            status = pstate.read().strip()
            pstate.close()
            if status != "active":
                pm_modules.lib.log.error(f'AMD PSTATE not in desired mode: {status}')
                exit(1)
            pm_modules.lib.log.info(f'AMD PSTATE in {status} mode')
    except(FileNotFoundError):
        pm_modules.lib.log.error("Path not found")
        exit(1)

    if UID != 0:
        pm_modules.lib.log.error("Program requires root privileges")
        exit(1)
    main()

