#!/usr/bin/env python3
import os
import sys
import time
import logging
import argparse
import subprocess

UID = os.getuid()

log = logging.getLogger()
log.setLevel(logging.DEBUG)

handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(levelname)s - %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)

ARGS = ['--platform', '--cpu']
EPP_PROFILES = ['performance', 'balance_performance', 'balance_power', 'power']
GOV_PROFILES = ['powersave', 'performance']
PLATFORM_POWER_PROFILES = ['power-saver', 'balanced', 'performance']

AMD_PSTATE_STATUS = '/sys/devices/system/cpu/amd_pstate/status'
SCALING_GOV = '/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor'
EPP = '/sys/devices/system/cpu/cpu0/cpufreq/energy_performance_preference'



def set_platofrm_profile(power_profile: str):
    try:
        if power_profile in PLATFORM_POWER_PROFILES:
            subprocess.call(['powerprofilesctl', 'set', f'{power_profile}'])
            log.info(f'Platform power profile set to: {power_profile}')
        else:
            log.error(f'Invalid argument: {power_profile}')
    except(FileNotFoundError):
        log.error(f'Cannot set Platform Power Profile to {power_profile}, powerprofilesctl not found')


def get_current_gov() -> str:
    try:
        with open(SCALING_GOV, 'r') as gov:
            current_gov = gov.read().strip()
            gov.close()
    except(FileNotFoundError):
        log.warning(f'Scaling governor not available')
    return current_gov


def set_gov(gov: str):
    CPUS = os.cpu_count()
    if gov in GOV_PROFILES: 
        for cpu in range(CPUS):
            try:
                with open(f'/sys/devices/system/cpu/cpu{cpu}/cpufreq/scaling_governor', 'w') as cpu_gov:
                    cpu_gov.write(gov)
                    cpu_gov.close()     
            except(OSError):
                log.error('Cannot set scaling governor')
                exit(1)
        log.info(f'Scaling governor set to: {gov}')


def set_epp(epp: str):
    CPUS = os.cpu_count()
    if epp in EPP_PROFILES:
        for cpu in range(CPUS):
            try:
                with open(f'/sys/devices/system/cpu/cpu{cpu}/cpufreq/energy_performance_preference', 'w') as cpu_epp:
                    cpu_epp.write(epp)
                    cpu_epp.close()
            except(OSError):
                log.warning(f'Cannot set EPP profile to: {epp}')
                return
        log.info(f'EPP set to: {epp}')
    else:    
        log.error(f'Invalid argument: {epp}')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--platform', help='''Set platform power profile ['power-saver', 'balanced', 'performance']''')
    parser.add_argument('-c', '--cpu', help='''Set CPU energy performance preference ['performance', 'balance_performance', 'balance_power', 'power']''')
    args = parser.parse_args()
    gov = 'powersave'
    current_gov = get_current_gov()
    if gov != current_gov:
        set_gov(gov)
    else:
        log.info(f'Governor already in desired state: {gov}')
    #print(args.cpu, args.platform)
    if args.cpu != None:
        set_epp(args.cpu)
    if args.platform != None:    
        set_platofrm_profile(args.platform)
    

if __name__ == "__main__":
    try:
        with open(AMD_PSTATE_STATUS, "r") as f:
            status = f.read().strip()
            f.close()
            if status != "active":
                log.error(f'AMD PSTATE not in desired mode: {status}')
                exit(1)
            log.info(f'AMD PSTATE in {status} mode')
    except(FileNotFoundError):
        log.error("Path not found")
        exit(1)

    if UID != 0:
        log.error("Program requires root privileges")
        exit(1)
    main()

